pipeline {
    agent any
    parameters {
        string(name: 'INSTANCE_IP', description: 'EC2 Public IP from Terraform')
        string(name: 'RDS_ENDPOINT', description: 'RDS Endpoint from Terraform')
        string(name: 'JIRA_ISSUE_KEY', description: 'JIRA Issue Key (e.g., WN-123)')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Deploy App') {
            steps {
                withCredentials([
                    file(credentialsId: 'devops-key', variable: 'SSH_KEY'),
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']
                ]) {
                    script {
                        // Block 1: Set up the virtual environment and install dependencies
                        sh '''
                            if [ ! -d "${WORKSPACE}/venv_ansible" ] || [ ! -f "${WORKSPACE}/venv_ansible/bin/activate" ]; then
                                echo "Creating or updating the Ansible virtual environment..."
                                rm -rf "${WORKSPACE}/venv_ansible"
                                python3 -m venv --upgrade-deps "${WORKSPACE}/venv_ansible"
                            fi

                            . "${WORKSPACE}/venv_ansible/bin/activate"
                            pip install --upgrade pip
                            pip install botocore boto3 ansible
                            ansible-galaxy collection install amazon.aws
                        '''
                        
                        // Block 2: Update the inventory file with dynamic parameters
                        sh """
                            sed -i "s/<INSTANCE_PUBLIC_IP>/${params.INSTANCE_IP}/g" inventory.ini
                            sed -i "s/<RDS_ENDPOINT>/${params.RDS_ENDPOINT}/g" inventory.ini
                        """
                        
                        // Block 3: Configure SSH key for secure access
                        sh '''
                            mkdir -p ~/.ssh
                            cp "$SSH_KEY" ~/.ssh/devops-key
                            chmod 600 ~/.ssh/devops-key
                        '''

                        // Block 4: Add host key to known_hosts
                        sh "ssh-keyscan -H ${params.INSTANCE_IP} >> ~/.ssh/known_hosts"

                        // Block 5: Execute the Ansible playbook with extra variables
                        sh "ansible-playbook -i inventory.ini deploy.yml --extra-vars \"db_host=${params.RDS_ENDPOINT}\""
                    }
                }
            }
        }
    }
    post {
        success {
            echo "✅ CD Pipeline Success: ${BUILD_URL}"
        }
        failure {
            echo "❌ CD Pipeline Failed: ${BUILD_URL}"
        }
        always {
            cleanWs()
        }
    }
}